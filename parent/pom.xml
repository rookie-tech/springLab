<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hyena</groupId>
    <artifactId>parent</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>parent</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <spring.version>5.0.1.RELEASE</spring.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!--spring框架基本核心工具类，spring其它组件都需要使用到这个包类面
            的类，是其它组件的基本核心-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <!--这个jar文件是所有应用都要用到的，它包含访问配置文件，创建和管理bean
            以及进行ioc操作相关的所有类，如果应用只需要基本ioc支持，引入spring-core和spring-beans即可-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <!--这个jar文件包含在应用中使用spring的aop特性时所需的类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <!--这个jar文件为spring核心提供了大量扩展。可以找到spring ApplicationContext
            特性时所需的全部类，JDNI所需的全部类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <!--这个jar文件包含spring DAO spring Transaction进行数据访问的所有类。
            为了使用声明型事物支持，还需在自己的应用中包含spring-aop.jar-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-dao</artifactId>
            <version>2.0.8</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含spring对hibernate 2 以及hibernate 3进行封装的所有类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-hibernate</artifactId>
            <version>1.2.9</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含spring对DAO特性集进行了扩展，使其支持iBatis,jdo,ojb,toplink，因为hibernate已经独立
            成包了。这个jar文件里大部分的类都要依赖spring-dao里面的类，使用这个包同时要包含spring-dao包-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含支持EJB JMS ，远程调用Remoting方面的类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-remoting</artifactId>
            <version>2.0.8</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含支持缓存Cache，JCA，JMX，
            邮件服务，任务计划Scheduling方面的类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含web应用开发时，用到spring框架时所需的核心类，
            包括自动载入WebApplicationContext特性的类，Struts于JFS集成类，文件上传支持类，
            Filter类和大量工具辅助类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含spring MVC框架相关的所有类。包含国际化，标签，Theme，视图展现FreeMarker
            注意：如果使用独立的MVC框架，则无需这个Jar文件里的任何类-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <!--这个jar文件包含spring一整套mock类来辅助应用的测试。spring测试套件使用了其中
            大量mock类，这样测试就更加简单。模拟HttpServletRequest,HttpServletResponse类在web
            应用单元中是很方便的-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-mock</artifactId>
            <version>2.0.8</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.20.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
